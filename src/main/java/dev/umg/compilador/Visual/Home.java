/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dev.umg.compilador.Visual;

import dev.umg.compilador.ModeloError;
import dev.umg.compilador.ModeloError;
import dev.umg.compilador.NumeroLineas;
import dev.umg.compilador.ModeloOperacion;
import dev.umg.compilador.ModeloOperacion;
import dev.umg.compilador.Token;
import dev.umg.compilador.Token;
import dev.umg.compilador.Variable;
import dev.umg.compilador.Variable;
import java.awt.CheckboxGroup;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author teamCompi
 */
public class Home extends javax.swing.JFrame {

    NumeroLineas numberLine;
    //TableToken tokenTable = new TableToken();

    String[] types = new String[]{"Integer", "Char", "String", "Boolean", "Real", "Int"};
    List<String> type = Arrays.asList(types);

    List<Variable> vars = new ArrayList<>();
    List<ModeloError> erros = new ArrayList<>();
    List<ModeloOperacion> operations = new ArrayList<>();

    List<Token> oldTokens = new ArrayList<>();

    /**
     * Creates new form Test
     */
    public Home() {
        initComponents();
        this.setLocationRelativeTo(null);

        // LINEAS DE CAJA DE TEXTO
        this.numberLine = new NumeroLineas(this.jTextCode);
        this.jScrollPane.setRowHeaderView(this.numberLine);

        //this.loadFile(System.getProperty("user.dir")+"/compiler-structure.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogOpen = new javax.swing.JDialog();
        jScrollPane = new javax.swing.JScrollPane();
        jTextCode = new javax.swing.JTextArea();
        jButtonVerify = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTokens = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SE = new javax.swing.JTextArea();

        javax.swing.GroupLayout jDialogOpenLayout = new javax.swing.GroupLayout(jDialogOpen.getContentPane());
        jDialogOpen.getContentPane().setLayout(jDialogOpenLayout);
        jDialogOpenLayout.setHorizontalGroup(
            jDialogOpenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialogOpenLayout.setVerticalGroup(
            jDialogOpenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextCode.setColumns(20);
        jTextCode.setRows(5);
        jScrollPane.setViewportView(jTextCode);

        jButtonVerify.setText("RUN");
        jButtonVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerifyActionPerformed(evt);
            }
        });

        jTableTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Token", "Categor√≠a", "Tipo", "Valor", "Prioridad"
            }
        ));
        jScrollPane1.setViewportView(jTableTokens);

        jButton1.setText("TABLA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("OPEN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        SE.setBackground(new java.awt.Color(0, 0, 0));
        SE.setColumns(20);
        SE.setForeground(new java.awt.Color(255, 255, 102));
        SE.setRows(5);
        jScrollPane2.setViewportView(SE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jButtonVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerifyActionPerformed
        this.SE.setText("");
        String code = this.jTextCode.getText();
        String[] array = code.split("\n");

        this.vars.clear();
        this.erros.clear();
        this.operations.clear();
        this.oldTokens.clear();

        for (int i = 0; i < array.length; i++) {

            if (!isComment(array[i])) {
                if (i < 10) {
                    String[] arrayLine = array[i].replace(";", " ").split(" ");

                    String name = "";
                    String type = "";
                    String value = "0";

                    for (int j = 0; j < arrayLine.length; j++) {

                        // Posicion 0 del array
                        if (j == 0) {
                            name = arrayLine[j];
                        }

                        // Posicion 2 del array
                        if (j == 2) {

                            type = arrayLine[j];

                            if (!this.type.contains(arrayLine[j])) {
                                ModeloError erro = new ModeloError();
                                //erro.setMessage("ERROR 00001: El tipo de variable es invalido.");
                                erro.setLine(i + 1);
                                //this.erros.add(erro);

                                showMessageConsole("ERROR 00001: El tipo de variable es invalido, Linea: " + (i + 1) + "");
                            }
                        }

                        // Posicion 4 del array
                        if (j == 4 && arrayLine[j] != "=" && arrayLine[j] != " ") {
                            value = arrayLine[j];
                        }
                    }

                    Variable var = new Variable();
                    var.setName(name);
                    var.setType(type);
                    var.setValor(value);
                    vars.add(var);
                }
                if (i >= 10) {
                    this.generateTokens(array[i], i + 1);
                }
            }

        }

        this.prioridad();
        this.showErros();
    }//GEN-LAST:event_jButtonVerifyActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        JFileChooser open = new JFileChooser();
        FileNameExtensionFilter file = new FileNameExtensionFilter(null, "txt");
        open.setFileFilter(file);
        int request = open.showOpenDialog(null);
        cargar();
        if (request == JFileChooser.APPROVE_OPTION) {

            String path = open.getSelectedFile().getAbsolutePath();
            this.loadFile(path);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cargar();
        addRowToJTable();
//allTable(oldTokens);
        //this.tokenTable.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        try {

            JFrame.setDefaultLookAndFeelDecorated(true);
            JDialog.setDefaultLookAndFeelDecorated(true);
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            //UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea SE;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonVerify;
    private javax.swing.JDialog jDialogOpen;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTableTokens;
    private javax.swing.JTextArea jTextCode;
    // End of variables declaration//GEN-END:variables

    protected void loadFile(String path) {

        // System.getProperty("user.dir")+"/backup.txt" 
        File archive = new File(path);
        Scanner s = null;
        StringBuilder sb = new StringBuilder();

        try {
            s = new Scanner(archive);
            while (s.hasNextLine()) {

                sb.append(s.nextLine());
                sb.append("\n");

            }
            this.jTextCode.setText(sb.toString());
            //JOptionPane.showMessageDialog(null,"Structure loads properly");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } finally {
            if (s != null) {
                s.close();
            }
        }
    }

    public void showErros() {

        String ErrorAll = "";

        for (int i = 0; i < erros.size(); i++) {
            // .out.println();
            ErrorAll += erros.get(i).getMessage() + " Line: " + erros.get(i).getLine() + "\n";
        }

        if (erros.size() > 0) {
            JOptionPane.showMessageDialog(null, ErrorAll);
        }
    }

    public void addRowToJTable() {
        Double sumaTotal = 0.0;
        for (ModeloOperacion opt : this.operations) {
//            if (opt.getOperation().equals(this.jComboBoxOperations.getSelectedItem())) {

            String formula = "";
            for (int i = 0; i < opt.getTokens().size(); i++) {
                if (i >= 2) {
                    // replace variable value 
                    if (!isVar(opt.getTokens().get(i).getToken())) {
                        formula += getValue(opt.getTokens().get(i).getToken());
                    } else {
                        formula += opt.getTokens().get(i).getToken();
                    }

                }

            }

            allTable(opt.getTokens());
            System.out.println(formula);
            sumaTotal = sumaTotal + makeOperation(formula, opt.getOperation());

//            }
        }
        showMessageConsole("Total: " + sumaTotal);

    }

//    public void showMensaje() {
//        for (ModeloOperacion opt : this.operations) {
//            String formula = "";
//            for (int i = 0; i < opt.getTokens().size(); i++) {
//                if (i >= 2) {
//                    // replace variable value 
//                    if (!isVar(opt.getTokens().get(i).getToken())) {
//                        formula += getValue(opt.getTokens().get(i).getToken());
//                    } else {
//                        formula += opt.getTokens().get(i).getToken();
//                    }
//
//                }
//            }
//            allTable(opt.getTokens());
//            makeOperation(formula);
//        }
//
//    }
    public void showMessageConsole(String texto) {
        this.SE.append("--     " + texto +"\n");
    }

    public void generateTokens(String code, int line) {

        StringTokenizer tokenizer;
        String codeFragment;
        String oldCodeFragment = "";
        String space = " \t";
        String operator = "=)+-*/%^(";
        List<Token> tokens = new ArrayList<>();
        boolean hasErrorLine = false;

        // Parentecis 
        boolean hasOpenParentecis = false;
        boolean hasEndParentecis = false;
        int conOpenParentecis = 0;
        int conEndParentecis = 0;

        hasErrorLine = hasSimicolons(code, line); // ModeloError de punto y coma
        tokenizer = new StringTokenizer(code.replace(";", " ").trim(), space + operator, true);
        while (tokenizer.hasMoreTokens()) {

            codeFragment = tokenizer.nextToken();

            Token token = new Token();
            token.setId(0);
            token.setToken(codeFragment);
            token.setType("N/A");
            token.setCategory("N/A");
            token.setValue("N/A");
            token.setPriority(0);

            if (codeFragment.equals("(")) {
                conOpenParentecis++;
                hasOpenParentecis = true;
            }

            if (codeFragment.equals(")")) {
                conEndParentecis++;
                hasEndParentecis = true;
            }

            // Regex -> Number ([\d.]+)
            if (codeFragment.matches("[\\d.]+")) {
                // Do something
                token.setCategory("Numero");
                token.setType("Real");
            }

            // Regex -> Operations
            if (codeFragment.matches(".*[-+*/()=].*")) {
                // Do something *
                token.setCategory("Operador");

                if (codeFragment.equals("(")) {
                    token.setCategory("Agrupador");

                    for (Token tok : this.oldTokens) {
                        if (tok.getToken().equals(oldCodeFragment)) {
                            if (tok.getCategory().equals("Operador") && !token.getCategory().equals("Agrupador")) {
                                hasErrorLine = true;
                                ModeloError erro = new ModeloError();
                                erro.setMessage("ERROR 00002: Operaciones invalidas *** " + tok.getToken() + token.getToken() + " ***");
                                erro.setLine(line);
                                this.erros.add(erro);
                            }
                        }
                    }
                }

                if (codeFragment.equals(")")) {
                    token.setCategory("Agrupador");
                    for (Token tok : this.oldTokens) {
                        // * + - /  -> )
                        if (tok.getToken().equals(oldCodeFragment)) {
                            if (tok.getCategory().equals("Operador") && token.getCategory().equals("Agrupador")) {
                                hasErrorLine = true;
                                ModeloError erro = new ModeloError();
                                //erro.setMessage("ERROR 00004: No hay suficientes valores para operar la f√≥rmula *** "+tok.getToken()+token.getToken()+" ***");
                                erro.setLine(line);
                                //this.erros.add(erro);
                                showMessageConsole("ERROR 00003: No hay suficientes valores para operar la f√≥rmula, Linea: " + line + "");
                            }
                        }
                    }
                }

                if (codeFragment.equals("+") || codeFragment.equals("-") || codeFragment.equals("/")) {
                    // token.setCategory("Agrupador");
                    for (Token tok : this.oldTokens) {
                        // * + - /  -> )
                        if (tok.getToken().equals(oldCodeFragment)) {
                            if (tok.getCategory().equals("Operador") && token.getCategory().equals("Operador")) {
                                hasErrorLine = true;
                                ModeloError erro = new ModeloError();
                                //erro.setMessage("ERROR 00004: No hay suficientes valores para operar la f√≥rmula *** "+tok.getToken()+token.getToken()+" ***");
                                erro.setLine(line);
                                //this.erros.add(erro);
                                showMessageConsole("ERROR 00004: No hay suficientes valores para operar la f√≥rmula, Linea: " + line + "");
                            }
                        }
                    }
                }
            }

            for (Variable var : this.vars) {
                if (var.getName().equals(token.getToken())) {
                    token.setCategory("Variable");
                    token.setValue(var.getValor());
                    token.setType(var.getType());

                    if (token.getType().equals("String") || token.getType().equals("Char")) {
                        ModeloError erro = new ModeloError();
                        //erro.setMessage("ERROR 00008: La variable definida en la operacion es invalida... *** " + token.getToken() + " ***");                       
                        erro.setLine(line);
                        //this.erros.add(erro);
                        hasErrorLine = true;
                        //------------------------------------------------------------------------------------------------------------------------ NO
                        showMessageConsole("ERROR 00005: La variable definida en la operacion es invalida, Linea: " + line + "");
                    }
                }
            }

            if (isVar(token.getToken()) && token.getCategory().equals("N/A")) {
                ModeloError erro = new ModeloError();
                //erro.setMessage("ERROR 00007: La variable definida no se encuentra declarada *** " + token.getToken() + " ***");
                erro.setLine(line);
                //this.erros.add(erro);
                hasErrorLine = true;
                showMessageConsole("ERROR 00006: La variable definida no se encuentra declarada, Linea: " + line + "");
            }

            oldCodeFragment = codeFragment;
            tokens.add(token);
            this.oldTokens.add(token);
        }

        if ((hasOpenParentecis && !hasEndParentecis) || conOpenParentecis != conOpenParentecis) {
            ModeloError erro = new ModeloError();
            // erro.setMessage("ERROR 00003: Un parentecis est√° mal cerrado.");
            erro.setLine(line);
            showMessageConsole("ERROR 00007: Un parentecis est√° mal Cerrado, Linea: " + line + "");
            //his.erros.add(erro);

        }

        if ((!hasOpenParentecis && hasEndParentecis) || conEndParentecis != conEndParentecis) {
            ModeloError erro = new ModeloError();
            //erro.setMessage("ERROR 00003: Un parentecis est√° mal cerrado.");
            erro.setLine(line);

            //this.erros.add(erro);
            showMessageConsole("ERROR 00008: Un parentecis est√° mal Abierto, Linea: " + line + "");
        }

        // Operations
        ModeloOperacion oper = new ModeloOperacion();
        oper.setOperation(code);
        oper.setValitade(!hasErrorLine);
        oper.setTokens((ArrayList<Token>) tokens);
        this.operations.add(oper);
    }

    protected void clearTable() {

        DefaultTableModel table = (DefaultTableModel) this.jTableTokens.getModel();
        for (int i = 0; i < this.jTableTokens.getRowCount(); i++) {
            table.setRowCount(i);
        }
    }

    protected boolean hasSimicolons(String code, int number) {

        if (!code.endsWith(";")) {
            ModeloError erro = new ModeloError();
            // erro.setMessage("ERROR 00002: No contiene el punto y coma.");
            erro.setLine(number);
            // this.erros.add(erro);
            showMessageConsole("ERROR 00009: No contiene el punto y coma,  Linea: " + number + "");
            return true;
        }

        return false;
    }

    protected boolean isComment(String code) {

        if (code.startsWith("//") || code.startsWith("// ")) {
            return true;
        }

        return false;
    }

    protected void allTable(List<Token> tokens) {

        DefaultTableModel table = (DefaultTableModel) this.jTableTokens.getModel();

        Object rowData[] = new Object[6];
        for (int i = 0; i < tokens.size(); i++) {

            rowData[0] = i + 1;
            rowData[1] = tokens.get(i).getToken();
            rowData[2] = tokens.get(i).getCategory();
            rowData[3] = tokens.get(i).getType();
            rowData[4] = tokens.get(i).getValue();
            rowData[5] = tokens.get(i).getPriority();
            table.addRow(rowData);
        }

    }

    protected void prioridad() {

        for (ModeloOperacion opt : this.operations) {

            int prioridad = 0;
            int agrupadores = 0;
            int divicion = 0;
            int multiplicacion = 0;
            int suma = 0;
            int resta = 0;

            boolean hasPrioridad = false;
            boolean hasParentesis = false;
            boolean hasDivicion = false;
            boolean hasMultiplicacion = false;
            boolean hasSuma = false;
            boolean hasResta = false;

            // System.out.println(opt.getTokens().size());
            for (Token tkn : opt.getTokens()) {
                for (int i = 0; i < opt.getTokens().size(); i++) {
                    if (opt.getTokens().get(i).getToken().equals("(") || opt.getTokens().get(i).getToken().equals(")")) {

                        hasParentesis = true;

                        if (agrupadores == 0) {
                            agrupadores++;
                        }

                    }
                    if (opt.getTokens().get(i).getToken().equals("/")) {

                        hasDivicion = true;

                        if (divicion == 0) {
                            divicion++;
                        }
                    }
                    if (opt.getTokens().get(i).getToken().equals("*")) {

                        hasMultiplicacion = true;

                        if (multiplicacion == 0) {
                            multiplicacion++;
                        }
                    }
                    if (opt.getTokens().get(i).getToken().equals("+")) {

                        hasSuma = true;

                        if (suma == 0) {
                            suma++;
                        }

                    }
                    if (opt.getTokens().get(i).getToken().equals("-")) {

                        hasResta = true;

                        if (resta == 0) {
                            resta++;
                        }
                    }
                }

                if (tkn.getToken().equals("(") || tkn.getToken().equals(")")) {
                    if (hasParentesis) {
                        tkn.setPriority(1);
                    }
                }
                if (tkn.getToken().equals("/")) {
                    if (hasParentesis) {
                        tkn.setPriority(2);
                    } else {
                        tkn.setPriority(1);
                    }
                }
                if (tkn.getToken().equals("*")) {
                    if (hasParentesis && hasDivicion) {
                        tkn.setPriority(3);
                    } else if (hasParentesis && !hasDivicion) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion) {
                        tkn.setPriority(2);
                    } else {
                        tkn.setPriority(1);
                    }
                }
                if (tkn.getToken().equals("+")) {
                    if (hasParentesis && hasDivicion && hasMultiplicacion) {
                        tkn.setPriority(4);
                    } else if (hasParentesis && hasDivicion && !hasMultiplicacion) {
                        tkn.setPriority(3);
                    } else if (hasParentesis && !hasDivicion && !hasMultiplicacion) {
                        tkn.setPriority(2);
                    } else if (hasParentesis && !hasDivicion && hasMultiplicacion) {
                        tkn.setPriority(3);
                    } else if (!hasParentesis && !hasDivicion && hasMultiplicacion) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion && !hasMultiplicacion) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion && !hasMultiplicacion) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion && hasMultiplicacion) {
                        tkn.setPriority(3);
                    } else {
                        tkn.setPriority(1);
                    }
                }
                if (tkn.getToken().equals("-")) {
                    if (hasParentesis && hasDivicion && hasMultiplicacion && hasSuma) {
                        tkn.setPriority(5);
                    } else if (hasParentesis && hasDivicion && hasMultiplicacion && !hasSuma) {
                        tkn.setPriority(4);
                    } else if (hasParentesis && hasDivicion && !hasMultiplicacion && !hasSuma) {
                        tkn.setPriority(3);
                    } else if (hasParentesis && !hasDivicion && !hasMultiplicacion && !hasSuma) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion && hasMultiplicacion && hasSuma) {
                        tkn.setPriority(4);
                    } else if (!hasParentesis && !hasDivicion && hasMultiplicacion && hasSuma) {
                        tkn.setPriority(3);
                    } else if (!hasParentesis && !hasDivicion && !hasMultiplicacion && hasSuma) {
                        tkn.setPriority(2);
                    } else if (!hasParentesis && hasDivicion && !hasMultiplicacion && hasSuma) {
                        tkn.setPriority(3);
                    } else if (hasParentesis && !hasDivicion && hasMultiplicacion && !hasSuma) {
                        tkn.setPriority(3);
                    } else {
                        tkn.setPriority(1);
                    }
                }
            }
        }

    }

    protected Double makeOperation(String operation, String oper) {
        try {
            ScriptEngineManager manager = new ScriptEngineManager();
            ScriptEngine engine = manager.getEngineByName("js");
            Object result;
            result = engine.eval(operation);
            showMessageConsole("Resultado de '" + oper + "' :" + result + "\n");
            return (Double) result;

        } catch (ScriptException ex) {
            System.out.println("Error in operation");
        }
        return null;

    }

    protected boolean isVar(String search) {

        for (Variable var : this.vars) {
            if (var.getName().equals(search)) {
                return false;
            }
        }

        return true;
    }

    protected String getValue(String search) {

        for (Variable var : this.vars) {
            if (var.getName().equals(search)) {
                return var.getValor();
            }
        }

        return "";

    }

    public void cargar() {
        JFrame frame = new JFrame("MessageDialog");
        frame.setSize(500, 100);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        JLabel info = new JLabel();
        JButton boton = new JButton("Aceptar");
        boton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                frame.dispose();
            }
        });

        JProgressBar current = new JProgressBar(0, 100);
        int num = 20;
        JPanel pane = new JPanel();
        current.setValue(0);
        current.setStringPainted(true);

        frame.setContentPane(pane);
        pane.add(info);
        pane.add(current);
        pane.add(boton);
        frame.setVisible(true);
        do {

            try {
                Thread.sleep(1000);
                num += 20;
                this.SE.setText("");
                showMessageConsole("Cargando... " + num + "%");
                frame.setTitle("Cargando... " + num + "%");
                current.setValue(num);
            } catch (InterruptedException e) {
            }

        } while (num < 100);

    }
}
